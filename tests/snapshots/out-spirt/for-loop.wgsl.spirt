module.dialect = spv.Module(version: 1.5, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(generator: spv.Tool(id: 0, version: 28))

type T0 = spv.OpTypePointer(spv.StorageClass.Function, s32)

#[spv.Decoration.Flat]
#[spv.Decoration.Location(Location: 0)]
global_var GV0 in spv.StorageClass.Output: s32

func F`main`() -> spv.OpTypeVoid {
  v`o` = spv.OpVariable(spv.StorageClass.Function, Initializer: 1s32): T0
  v`i` = spv.OpVariable(spv.StorageClass.Function, Initializer: 1s32): T0
  loop {
    v1 = spv.OpLoad(Pointer: v`i`): s32
    v2 = spv.OpSLessThan(v1, 10s32): bool
    (v3: bool, _: bool) = if v2 {
      v4 = spv.OpLoad(Pointer: v`i`): s32
      v5 = spv.OpLoad(Pointer: v`o`): s32
      v6 = spv.OpIMul(v5, v4): s32
      spv.OpStore(Pointer: v`o`, Object: v6)
      v7 = spv.OpLoad(Pointer: v`i`): s32
      v8 = spv.OpIAdd(v7, 1s32): s32
      spv.OpStore(Pointer: v`i`, Object: v8)
      (true, false)
    } else {
      (false, true)
    }
  } while v3
  v0 = spv.OpLoad(Pointer: v`o`): s32
  spv.OpStore(Pointer: &GV0, Object: v0)
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Vertex, Name: "main"): F`main`,
}