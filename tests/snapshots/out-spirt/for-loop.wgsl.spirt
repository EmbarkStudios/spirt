module.dialect = spv.Module(version: 1.5, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(generator: spv.Tool(id: 0, version: 28))

#[qptr.usage(s32)]
#[spv.Decoration.Flat]
#[spv.Decoration.Location(Location: 0)]
global_var GV0 in spv.StorageClass.Output: s32

func F`main`() -> spv.OpTypeVoid {
  #[qptr.usage(s32)]
  v`o` = qptr.func_local_var(size: 4, align: 4, initializer: 1s32): qptr
  #[qptr.usage(s32)]
  v`i` = qptr.func_local_var(size: 4, align: 4, initializer: 1s32): qptr
  loop {
    v1 = qptr.load(v`i`): s32
    v2 = spv.OpSLessThan(v1, 10s32): bool
    (v3: bool, _: bool) = if v2 {
      v4 = qptr.load(v`i`): s32
      v5 = qptr.load(v`o`): s32
      v6 = spv.OpIMul(v5, v4): s32
      qptr.store(v`o`, v6)
      v7 = qptr.load(v`i`): s32
      v8 = spv.OpIAdd(v7, 1s32): s32
      qptr.store(v`i`, v8)
      (true, false)
    } else {
      (false, true)
    }
  } while v3
  v0 = qptr.load(v`o`): s32
  qptr.store(&GV0, v0)
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Vertex, Name: "main"): F`main`,
}