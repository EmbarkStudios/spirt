module.dialect = spv.Module(version: 1.3, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(
  generator: spv.Tool(id: 8, version: 11),
  source_languages: {
    spv.SourceLanguage.GLSL(version: 450): {
      "tests/snapshots/in/basic.frag.glsl":
         "// Minimal fragment shader, for use with `glslangValidator`, e.g. full command\
        \n// for a debuginfo build (the `--target-env` is to get `OpModuleProcessed`):\
        \n// `glslangValidator -V --target-env spirv1.3 -g basic.frag.glsl -o basic.frag.glsl.dbg.spv`\
        \n\
        \n#version 450\
        \n\
        \n// NOTE(eddyb) some arbitrary extension for `OpSourceExtension`.\
        \n#extension GL_EXT_scalar_block_layout : enable\
        \n\
        \nlayout(location = 0) out vec4 output_color;\
        \n\
        \nvoid main() {\
        \n    output_color = vec4(1.0);\
        \n}\
        \n"
      ,
    },
  },
  source_extensions: ["GL_EXT_scalar_block_layout"],
  module_processes: ["client vulkan100", "target-env spirv1.3", "target-env vulkan1.0", "entry-point main"],
)

#[qptr.usage(f32×4)]
#[spv.Decoration.Location(Location: 0)]
global_var GV`output_color` in spv.StorageClass.Output: f32×4

#[spv.ExecutionMode.OriginUpperLeft]
// at tests/snapshots/in/basic.frag.glsl:12:12
func F`main`() -> spv.OpTypeVoid {
  // at tests/snapshots/in/basic.frag.glsl:13:1
  qptr.store(&GV`output_color`, spv.OpConstantComposite(1.0f32, 1.0f32, 1.0f32, 1.0f32): f32×4)
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Fragment, Name: "main"): F`main`,
}