module.dialect = spv.Module(version: 1.3, spv.Capability.Shader, spv.MemoryModel.GLSL450)

module.debug_info = spv.Module.DebugInfo(
  generator: spv.Tool(id: 8, version: 11),
  source_languages: {
    spv.SourceLanguage.GLSL(version: 450): {
      "tests/snapshots/in/for-loop.vert.glsl":
         "#version 450\
        \n\
        \nlayout(location = 0) out int output0;\
        \n\
        \nvoid main() {\
        \n    int o = 1;\
        \n    for (int i = 1; i < 10; i++)\
        \n    \t  o *= i;\
        \n    output0 = o;\
        \n}\
        \n"
      ,
    },
  },
  module_processes: ["client vulkan100", "target-env spirv1.3", "target-env vulkan1.0", "entry-point main"],
)

#[qptr.usage(s32)]
#[spv.Decoration.Location(Location: 0)]
global_var GV`output0` in spv.StorageClass.Output: s32

// at tests/snapshots/in/for-loop.vert.glsl:5:12
func F`main`() -> spv.OpTypeVoid {
  #[qptr.usage(s32)]
  v`o` = qptr.func_local_var(size: 4, align: 4): qptr
  #[qptr.usage(s32)]
  v`i` = qptr.func_local_var(size: 4, align: 4): qptr
  // at tests/snapshots/in/for-loop.vert.glsl:6:1
  qptr.store(v`o`, 1s32)
  // at tests/snapshots/in/for-loop.vert.glsl:7:1
  qptr.store(v`i`, 1s32)
  loop {
    // at tests/snapshots/in/for-loop.vert.glsl:7:1
    v1 = qptr.load(v`i`): s32
    // at tests/snapshots/in/for-loop.vert.glsl:7:1
    v2 = spv.OpSLessThan(v1, 10s32): bool
    (v3: bool, _: bool) = if v2 {
      // at tests/snapshots/in/for-loop.vert.glsl:8:1
      v4 = qptr.load(v`i`): s32
      // at tests/snapshots/in/for-loop.vert.glsl:8:1
      v5 = qptr.load(v`o`): s32
      // at tests/snapshots/in/for-loop.vert.glsl:8:1
      v6 = spv.OpIMul(v5, v4): s32
      // at tests/snapshots/in/for-loop.vert.glsl:8:1
      qptr.store(v`o`, v6)
      // at tests/snapshots/in/for-loop.vert.glsl:7:1
      v7 = qptr.load(v`i`): s32
      // at tests/snapshots/in/for-loop.vert.glsl:7:1
      v8 = spv.OpIAdd(v7, 1s32): s32
      // at tests/snapshots/in/for-loop.vert.glsl:7:1
      qptr.store(v`i`, v8)
      (true, false)
    } else {
      (false, true)
    }
  } while v3
  // at tests/snapshots/in/for-loop.vert.glsl:9:1
  v0 = qptr.load(v`o`): s32
  // at tests/snapshots/in/for-loop.vert.glsl:9:1
  qptr.store(&GV`output0`, v0)
}

export {
  spv.OpEntryPoint(spv.ExecutionModel.Vertex, Name: "main"): F`main`,
}